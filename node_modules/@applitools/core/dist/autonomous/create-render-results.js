"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCreateRenderResults = void 0;
const ufg_client_1 = require("@applitools/ufg-client");
const to_base_check_settings_1 = require("../automation/utils/to-base-check-settings");
function makeCreateRenderResults({ logger }) {
    /**
     * Autonomous should call this function to create render results after rendering is done.
     * After the UFG finishes rendering, it creates a new message in azure service bus, containing the raw render results.
     * This function is responsible for converting the raw render results into a format that can be used by the core.
     * It assumes that the rendering is finished, and it will throw an error if the rendering failed.
     */
    return async function createRenderResults({ renders, rawResults, }) {
        const results = rawResults.map((rawResult, index) => (0, ufg_client_1.toRenderResult)(rawResult, { renderId: renders[index].render.renderId }));
        results.forEach((result, index) => {
            if (result.status === 'error') {
                logger.error(`Render with id "${renders[index].render.renderId}" failed due to an error - ${result.error}`);
                throw new Error(`Render with id "${renders[index].render.renderId}" failed due to an error - ${result.error}`);
            }
            else if (result.status !== 'rendered') {
                // most probably rendering is still in progress
                throw new Error(`Unexpected status ${result.status} in get render results response`);
            }
        });
        return results.map(({ selectorRegions, renderId, status, error, ...baseTarget }, index) => {
            const { elementReferences: selectors, getBaseCheckSettings } = (0, to_base_check_settings_1.toBaseCheckSettings)({
                settings: renders[index].settings,
            });
            const baseSettings = getBaseCheckSettings({
                calculatedRegions: selectors.calculate.map((_, index) => {
                    var _a;
                    return ({
                        regions: (_a = selectorRegions === null || selectorRegions === void 0 ? void 0 : selectorRegions[index]) !== null && _a !== void 0 ? _a : [],
                    });
                }),
            });
            baseSettings.renderId = renderId;
            return {
                status,
                error,
                target: { ...baseTarget, isTransformed: true },
                settings: baseSettings,
                environment: renders[index].environment,
                account: renders[index].account,
            };
        });
    };
}
exports.makeCreateRenderResults = makeCreateRenderResults;
